name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Build package
        run: npm run build

      - name: Check package contents
        run: npm pack --dry-run

  publish:
    name: Publish to NPM
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Update package version
        run: npm version ${{ github.event.release.tag_name }} --no-git-tag-version

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for vulnerabilities
        run: npm audit --audit-level=moderate --production

  integration-test:
    name: Integration Test (Event Bus)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install root dependencies
        run: npm ci

      - name: Ensure artifacts directory exists
        run: mkdir -p integration-testing/artifacts

      - name: Start Pub/Sub emulator using docker-compose
        run: npm run emulator:start

      - name: Wait for Pub/Sub emulator to be ready
        run: |
          echo "Waiting for Pub/Sub emulator to start..."
          for i in {1..30}; do
            if nc -z localhost 8085; then 
              echo 'Pub/Sub emulator port is accessible'
              sleep 3
              echo 'Pub/Sub emulator should be ready'
              exit 0
            fi
            echo "Attempt $i: Emulator not ready, waiting 2 seconds..."
            sleep 2
          done
          echo 'Pub/Sub emulator did not start in time'
          echo "=== Docker Compose Logs ==="
          cd integration-testing && docker compose logs pubsub-emulator || echo "No logs available"
          exit 1

      - name: Build users-service
        run: |
          cd integration-testing/users-service
          npm ci
          npm run build

      - name: Build notifications-service
        run: |
          cd integration-testing/notifications-service
          npm ci
          npm run build

      - name: Start users-service
        run: |
          export PUBSUB_EMULATOR_HOST=localhost:8085
          echo "Starting users-service with PUBSUB_EMULATOR_HOST=$PUBSUB_EMULATOR_HOST"
          nohup node dist/users-service/src/main.js > ../artifacts/users-service.log 2>&1 &
          echo "Users-service started with PID: $!"
        working-directory: integration-testing/users-service

      - name: Start notifications-service
        run: |
          export PUBSUB_EMULATOR_HOST=localhost:8085
          echo "Starting notifications-service with PUBSUB_EMULATOR_HOST=$PUBSUB_EMULATOR_HOST"
          nohup node dist/notifications-service/src/main.js > ../artifacts/notifications-service.log 2>&1 &
          echo "Notifications-service started with PID: $!"
        working-directory: integration-testing/notifications-service

      - name: Wait for services to start
        run: |
          echo "Waiting 10 seconds for services to initialize..."
          sleep 10
          echo "Checking if services are up..."
          for i in {1..15}; do
            if nc -z localhost 3000 && nc -z localhost 3004; then 
              echo 'Services are up'
              sleep 2
              exit 0
            fi
            echo "Attempt $i: Services not ready yet, waiting 3 seconds..."
            if [ $i -eq 5 ] || [ $i -eq 10 ]; then
              echo "=== Debug: Users Service Log (attempt $i) ==="
              tail -20 integration-testing/artifacts/users-service.log || echo "No users-service log found"
              echo "=== Debug: Notifications Service Log (attempt $i) ==="
              tail -20 integration-testing/artifacts/notifications-service.log || echo "No notifications-service log found"
            fi
            sleep 3
          done
          echo 'Services did not start in time' 
          echo "=== Final Debug Logs ==="
          echo "=== Users Service Log ==="
          cat integration-testing/artifacts/users-service.log || echo "No users-service log found"
          echo "=== Notifications Service Log ==="
          cat integration-testing/artifacts/notifications-service.log || echo "No notifications-service log found"
          echo "=== Emulator Logs ==="
          cd integration-testing && docker compose logs pubsub-emulator || echo "No emulator logs"
          exit 1

      - name: Run all integration event tests
        run: npm run test:integration

      - name: Upload artifacts for debugging (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-artifacts
          path: integration-testing/artifacts/
